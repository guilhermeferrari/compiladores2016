/* Generated By:JavaCC: Do not edit this line. Compilador.java */
import java.io.*;

public class Compilador implements CompiladorConstants {
        public static void main (String args []) throws ParseException
        {
                Compilador compilador = null;
                while (true)
                {
                        System.out.println("Fazendo an\u00e1lise...");
                        try
                        {
                                compilador = new Compilador(new FileInputStream("codigo.hue"));
                                compilador.inicio();
                                System.out.println("compilador Lexico e Sintatico sem erros.\u005cn");
                                break;
                        }
                        catch(FileNotFoundException e)
                        {
                                System.out.println("Erro: arquivo nao encontrado!\u005cn");
                                break;
                        }
                        catch (TokenMgrError e)
                        {
                                System.out.println("Erro lexico\u005cn" + e.getMessage());
                                break;
                        }

                        catch(ParseException e)
                        {
                         System.out.println("Erro sintatico\u005cn" + e.getMessage());
                         break;
                        }
                }
        }

  static final public void inicio() throws ParseException {
    listaComandos();
    jj_consume_token(0);
  }

  static final public void listaComandos() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMEVAR:
      case EXIBE:
      case LEIA:
      case TIPONUM:
      case TIPOSTRING:
      case SE:
      case ESCOLHA:
      case ENQUANTO:
      case PARA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      comando();
    }
  }

  static final public void comando() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOMEVAR:
      atribVar();
      break;
    case TIPONUM:
    case TIPOSTRING:
      declaraVar();
      break;
    case LEIA:
      leia();
      break;
    case EXIBE:
      exibe();
      break;
    case SE:
      comandoSe();
      break;
    case ESCOLHA:
      comandoEscolha();
      break;
    case ENQUANTO:
      comandoEnquanto();
      break;
    case PARA:
      comandoPara();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expressao() throws ParseException {
    termo1();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
      case OUCC:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OU:
        jj_consume_token(OU);
        termo1();
        break;
      case OUCC:
        jj_consume_token(OUCC);
        termo1();
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo1() throws ParseException {
    termo2();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case E:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(E);
      termo2();
    }
  }

  static final public void termo2() throws ParseException {
    termo3();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
      case MENOR:
      case MAIORIGUAL:
      case MENORIGUAL:
      case DIFERENTE:
      case COMPARA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIOR:
        jj_consume_token(MAIOR);
        termo3();
        break;
      case MENOR:
        jj_consume_token(MENOR);
        termo3();
        break;
      case MAIORIGUAL:
        jj_consume_token(MAIORIGUAL);
        termo3();
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        termo3();
        break;
      case DIFERENTE:
        jj_consume_token(DIFERENTE);
        termo3();
        break;
      case COMPARA:
        jj_consume_token(COMPARA);
        termo3();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo3() throws ParseException {
    termo4();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
      case SUB:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ADD:
        jj_consume_token(ADD);
        termo4();
        break;
      case SUB:
        jj_consume_token(SUB);
        termo4();
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo4() throws ParseException {
    termo5();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
      case DIV:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULT:
        jj_consume_token(MULT);
        termo5();
        break;
      case DIV:
        jj_consume_token(DIV);
        termo5();
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void termo5() throws ParseException {
    termo6();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case POT:
      jj_consume_token(POT);
      termo5();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void termo6() throws ParseException {
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAO:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(NAO);
    }
    fator();
  }

  static final public void fator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARL:
      jj_consume_token(PARL);
      expressao();
      jj_consume_token(PARR);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case NOMEVAR:
      jj_consume_token(NOMEVAR);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declaraVar() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIPOSTRING:
      jj_consume_token(TIPOSTRING);
      break;
    case TIPONUM:
      jj_consume_token(TIPONUM);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(NOMEVAR);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      jj_consume_token(VIRG);
      jj_consume_token(NOMEVAR);
    }
    jj_consume_token(PTVIRG);
  }

  static final public void atribVar() throws ParseException {
    jj_consume_token(NOMEVAR);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      jj_consume_token(VIRG);
      jj_consume_token(NOMEVAR);
    }
    jj_consume_token(ATRIB);
    expressao();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_10;
      }
      jj_consume_token(VIRG);
      expressao();
    }
    jj_consume_token(PTVIRG);
  }

  static final public void leia() throws ParseException {
    jj_consume_token(LEIA);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      jj_consume_token(STRING);
      jj_consume_token(VIRG);
    }
    jj_consume_token(NOMEVAR);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_12;
      }
      jj_consume_token(VIRG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOMEVAR:
        jj_consume_token(NOMEVAR);
        break;
      case STRING:
        jj_consume_token(STRING);
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PTVIRG);
  }

  static final public void exibe() throws ParseException {
    jj_consume_token(EXIBE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      jj_consume_token(STRING);
      break;
    case NUMERO:
      jj_consume_token(NUMERO);
      break;
    case NOMEVAR:
      jj_consume_token(NOMEVAR);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_13;
      }
      jj_consume_token(VIRG);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        break;
      case NUMERO:
        jj_consume_token(NUMERO);
        break;
      case NOMEVAR:
        jj_consume_token(NOMEVAR);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(PTVIRG);
  }

  static final public void comandoSe() throws ParseException {
    blocoSe();
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SENAOSE:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_14;
      }
      blocoSenaoSe();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SENAO:
      blocoSenao();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    jj_consume_token(FIMSE);
  }

  static final public void blocoSe() throws ParseException {
    jj_consume_token(SE);
    jj_consume_token(PARL);
    expressao();
    jj_consume_token(PARR);
    listaComandos();
  }

  static final public void blocoSenaoSe() throws ParseException {
    jj_consume_token(SENAOSE);
    jj_consume_token(PARL);
    expressao();
    jj_consume_token(PARR);
    listaComandos();
  }

  static final public void blocoSenao() throws ParseException {
    jj_consume_token(SENAO);
    listaComandos();
  }

  static final public void comandoEscolha() throws ParseException {
    expEscolha();
    label_15:
    while (true) {
      expCaso();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASO:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_15;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OUTROS:
      expOutros();
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    jj_consume_token(FIMESCOLHA);
  }

  static final public void expEscolha() throws ParseException {
    jj_consume_token(ESCOLHA);
    jj_consume_token(PARL);
    expressao();
    jj_consume_token(PARR);
  }

  static final public void expCaso() throws ParseException {
    jj_consume_token(CASO);
    jj_consume_token(PARL);
    expressao();
    jj_consume_token(PARR);
    listaComandos();
  }

  static final public void expOutros() throws ParseException {
    jj_consume_token(OUTROS);
    listaComandos();
  }

  static final public void comandoEnquanto() throws ParseException {
    jj_consume_token(ENQUANTO);
    jj_consume_token(PARL);
    expressao();
    jj_consume_token(PARR);
    listaComandos();
    jj_consume_token(FIMENQUANTO);
  }

  static final public void comandoPara() throws ParseException {
    jj_consume_token(PARA);
    jj_consume_token(PARL);
    jj_consume_token(NOMEVAR);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
    case STRING:
    case NOMEVAR:
    case PARL:
    case NAO:
      paraSimples();
      break;
    case VIRG:
      paraEspecial();
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PARR);
    listaComandos();
    jj_consume_token(FIMPARA);
  }

  static final public void paraSimples() throws ParseException {
    expressao();
    jj_consume_token(ATE);
    expressao();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PASSO:
      jj_consume_token(PASSO);
      expressao();
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static final public void paraEspecial() throws ParseException {
    label_16:
    while (true) {
      jj_consume_token(VIRG);
      jj_consume_token(NOMEVAR);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRG:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_16;
      }
    }
    expressao();
    jj_consume_token(ATE);
    expressao();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7a000,0x7a000,0x0,0x0,0x0,0xfc000000,0xfc000000,0x3000000,0x3000000,0xc00000,0xc00000,0x200000,0x0,0x83800,0x60000,0x0,0x0,0x0,0x1000,0x0,0x3000,0x3800,0x0,0x3800,0x0,0x0,0x0,0x0,0x83800,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x5110,0x5110,0xa,0xa,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x80000,0x80000,0x80000,0x0,0x80000,0x0,0x0,0x80000,0x0,0x20,0x40,0x200,0x400,0x80004,0x10000,0x80000,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[52];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 52; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
