options  
{
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

import java.io.*;
import minhasclasses.*;
import minhasclasses.comandos.*;
import java.util.Iterator;
import java.util.LinkedList;
public class Compilador
{
  	static String nomeArquivoFonte = "exemplo12";
    static Tabela tabela = new Tabela();
    static LinkedList <Tipo> listaExpTipo = new LinkedList<Tipo>();
    static LinkedList <String> listaExp = new LinkedList<String>();
    public static void main (String args []) throws ParseException
    { 
        Compilador compilador = null;
        while (true)
        {
            System.out.println("Fazendo analise...");
            try
            {
                compilador = new Compilador(new FileInputStream(nomeArquivoFonte +".hue"));

				ListaComandos listaComandosPrincipal;
                listaComandosPrincipal = compilador.inicio();
                System.out.println(listaComandosPrincipal.toString());
                compilador.warning();
                System.out.println("\nEnd of compilation.\n");
                ObjectOutputStream output = new ObjectOutputStream(new FileOutputStream(nomeArquivoFonte+".int"));
                output.writeObject(listaComandosPrincipal);
                output.flush();
                output.close();

                //geracao codigo destino
                GeradorCodigoDestino.geraCodigoAssembler(listaComandosPrincipal,tabela);
                break;
            }
            catch(FileNotFoundException e)
            {
                System.out.println("Erro: arquivo nao encontrado!\n");
                break;
            }
            catch(TokenMgrError e)
            {
                System.out.println("Erro lexico\n" + e.getMessage());
                break;
            }

            catch(ParseException e)
            {
                 System.out.println("Erro sintatico\n" + e.getMessage());
                 break;
            }
            catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
        }
    }

    // kindSincronizacao representa o kind do token para a resincronizacao do
    // compilador.
    // Retorna um token anterior ao token de sincronização.
    static public void erroSintaticoPanico(String esperado, int kindSincronizacao)
    {
        Token t = getToken(1);
        System.out.print("\n++ Erro sintatico (linha "+t.beginLine);
        System.out.println(", coluna "+t.beginColumn+") ++");
        System.out.print("Encontrou \'"+t.image+"\'. ");
        System.out.println("Era esperado: "+esperado);
        if (t.kind != kindSincronizacao) {
            // kind 0 representa <EOF>
            while(t.kind!=kindSincronizacao && t.kind != 0) {
                t = getNextToken();
            }
        }
    }
    static public void erroSemantico(String s)
    {
        System.out.println(s);
    }

    public static void warning()
    {
        tabela.warningVar();
    }
      
}
PARSER_END(Compilador)

SKIP :
{
        " "
    |   "\r"
    |   "\t"
    |   "\n"
}

/*
    SKIP que ser� usado para os coment�rios
*/

SKIP : { "/*" : comentarioCompleto }

<comentarioCompleto>

SKIP: { "*/" : DEFAULT | <~[]> }

SKIP : { "//" : comentarioLinha }

<comentarioLinha>

SKIP: { "\n" : DEFAULT | <~[]> }

TOKEN :
{
        < NUMERO : (["0" - "9"])*(".")?(["0" - "9"])+ > 
    |   < STRING : ("\"")(~["\""])*("\"") >
    |   < NOMEVAR : ("_")(["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
    |   < ATRIB : "=" >
    |   < EXIBE : "exibe" >
    |   < LEIA : "leia" >
    |   < TIPONUM : "numero" >
    |   < TIPOSTRING : "string" >
    |   < PARL : "(" >
    |   < PARR : ")" >
    |   < POT : "^" >
    |   < MULT : "*" >
    |   < DIV : "/" >
    |   < ADD : "+" >
    |   < SUB : "-" >
    |   < MAIOR : ">" >
    |   < MENOR : "<" >
    |   < MAIORIGUAL : ">=" >
    |   < MENORIGUAL : "<=" >
    |   < DIFERENTE : "!=" >
    |   < COMPARA : "==" >
    |   < E : "e" >
    |   < OU : "ou" >
    |   < NAO : "nao" >
    |   < OUCC : "OU" >
    |   < SE : "se" >
    |   < SENAOSE : "senaoSe" >
    |   < SENAO : "senao" >
    |   < FIMSE : "fimSe" >
    |   < ESCOLHA : "escolha" >
    |   < CASO : "caso" >
    |   < OUTROS : "outros" >
    |   < FIMESCOLHA : "fimEscolha" >
    |   < ENQUANTO : "enquanto" >
    |   < FIMENQUANTO : "fimEnquanto" >
    |   < PARA : "para" >
    |   < ATE : "ate" >
    |   < PASSO : "passo" >
    |   < FIMPARA : "fimPara" >
    |   < PTVIRG : ";" >
    |   < VIRG : "," >

    // quet�o 1 da prova simulada
    |   < MODULO : "@" >
    // quest�o 2 da prova simulada
    |   < REPEAT : "repeat" >
    |   < UNTIL  : "until" >

    // PROVA
    //
  	| 	< SELECT : "select" >
  	| 	< OPTION : "option" >
  	| 	< ENDSELECT : "endSelect" >
  	 
}

ListaComandos inicio() : {ListaComandos listaCom;}
{
    listaCom = listaComandos() <EOF>
    {      return listaCom;
    }
}

ListaComandos listaComandos() : {ListaComandos listaCom = new ListaComandos(); }
{
    (comando(listaCom))*
    {
      return listaCom;
    }
}

void comando(ListaComandos listaCom) : {ListaComandos listaAux;                                        Comando com;}
{
        listaAux = atribVar()
        {
           listaCom.insere(listaAux);        }

    |   declaraVar()

    |   listaAux = leia()
        {
           listaCom.insere(listaAux);
        }

    |   listaAux = exibe()
        {
           listaCom.insere(listaAux);
        }
    |   com = comandoSe()
        {
           listaCom.insere(com);
        }

    |   com = comandoEscolha()
        {
           listaCom.insere(com);
        }

    |   com = comandoEnquanto()
        {
           listaCom.insere(com);
        }

    |   listaAux = comandoPara()
        {
           listaCom.insere(listaAux);
        }

    // quet�o 2 da prova simulada
    |   listaAux = comandoRepeatUntil()
        {
           listaCom.insere(listaAux);
        }

	//PROVA
	//
	|	com = comandoSelect()
		{
           listaCom.insere(com);
    	}
        
}

Expressao expressao() : { Expressao expressao=new Expressao(); Item item=null;
Token t=null; expressao.setLinha(getToken(1).beginLine);}
{
 
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {	
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*

    //Analisador semântico - Parte 2
    {
        //TipoDados tipoExp;
        Tipo valor = null;
 
        for (Iterator<Item> i = expressao.getListaExpressao().iterator();
             i.hasNext();)
        {
            Item ii = i.next();
            if (valor==null) {
                valor = ii.getTipo();
                if(valor==Tipo.NUMERO) {
                    listaExpTipo.add(Tipo.NUMERO);
                  
                    
          	    }
                if (valor==Tipo.STRING) {
                  listaExpTipo.add(Tipo.STRING);
                } else if(valor==Tipo.VARIAVEL) {
                    if (!tabela.isInicializada(ii.getValor()))
                        System.out.println("Erro semântico \nVariável não"+
                                           "inicializada: " + ii.getValor());
                    if(tabela.getTipoSimbolo(ii.getValor())=='n') {
                        valor = Tipo.NUMERO;
                        listaExpTipo.add(Tipo.NUMERO);     
                    } else {
                        valor = Tipo.STRING;
                        listaExpTipo.add(Tipo.STRING);
                    }
                }          
            } else if ( (ii.getTipo()!=Tipo.OPERADOR) &&
                        (valor!=ii.getTipo()) )
            {
                if(ii.getTipo()==Tipo.VARIAVEL) {
                    if (!tabela.isInicializada(ii.getValor()))
                        System.out.println("Erro semântico \nVariável não"+
                                           " inicializada: " + ii.getValor());
                    if(tabela.getTipoSimbolo(ii.getValor())=='n') {
                        if(valor!=Tipo.NUMERO) {
                            System.out.println("Erro semântico, expressões"+
                                               " não compativeis: "+
                                               expressao.getCodigoInfixo()+
                                               "\n");
                        }
                    } else {
                        if(valor!=Tipo.STRING) {
                            System.out.println("Erro semântico, expressões"+
                                               " não compativeis: "+
                                               expressao.getCodigoInfixo()+
                                               "\n");
                        }
                    }
                } else {
                    System.out.println("Erro semântico, expressões não"+
                                       " compativeis: "+
                                       expressao.getCodigoInfixo()+ "\n");
                }
            }

            if( (ii.getTipo()==Tipo.OPERADOR) &&
                (ii.getValor() != "+") &&
                (valor==Tipo.STRING))
  	        {
  	            System.out.println("Erro semântico, expressões não"+
  	                               " compativeis: "+
  	                               expressao.getCodigoInfixo()+ "\n");
  	        }
        }
        expressao.calculoPilha();
        return expressao;
     }
}

void expressaoAuxiliar(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
      	{
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo1(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo2(expressao)
    (
        t = <E>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo2(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo2(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo3(expressao)
    (
        t = <MAIOR>
        {
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENOR>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MAIORIGUAL>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENORIGUAL>
     	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <DIFERENTE>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <COMPARA>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo3(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo4(expressao)
    (
        t = <ADD>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <SUB>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo4(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo5(expressao)
    (
        t = <MULT>
        {   
            expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
          
            item = new Item (Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      |
        t = <DIV>
        {   
            expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
          
            item = new Item (Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo5(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo6(expressao)
    (
        t = <POT>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
            item = new Item (Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )?
}
void termo6(Expressao expressao) : { Token t=null; int cont=0; }
{
    (
        t = <NAO>
        {
            expressao.addCodigoInfixo(t.image);
            cont++;
        }
    )*
    termo7(expressao)
    {
        if(t!=null) {
          if((cont%2)==1) {
            //Adiciona 1 para Impar
                expressao.addItem(new Item(Tipo.OPERADOR, t.image));
                cont = 1;
            
          }
          else {
			//Adiciona 2 para pares
			cont = 2;
			while(cont > 0) {
			 	 expressao.addItem(new Item(Tipo.OPERADOR, t.image));
              	 cont--;
			  }
			
          }
           
        }
    }
}

// quest�o 1 da prova simulada
void termo7(Expressao expressao) : { Token t=null; int cont = 0;}
{
    (
        t = <MODULO>
        {
            expressao.addCodigoInfixo(t.image);
            cont++;
        }
    )*
    fator(expressao)
    {
        if(cont >= 1)
           expressao.addItem(new Item(Tipo.OPERADOR, t.image));     }
}

void fator(Expressao expressao) : { Token t=null; Token t1=null;
Item item = null;}
{
    (<ADD> | t1=<SUB>)?
    t = <NUMERO>
    {
      
        if (t1!=null)
        
            item = new Item( Tipo.NUMERO,
                             String.valueOf(Float.parseFloat(t.image)*-1) );
        else
            item = new Item( Tipo.NUMERO, t.image );
        expressao.addCodigoInfixo(item.getValor());
        expressao.addItem(item);

        if (expressao.getTipoDados()==null)
            expressao.setTipoDados(Tipo.NUMERO);
    }
  | t = <STRING>
    {
        expressao.addCodigoInfixo(t.image);
        expressao.addItem(new Item(Tipo.STRING, t.image));
        
        if (expressao.getTipoDados()==null)
            expressao.setTipoDados(Tipo.STRING);
    }
  | t = <NOMEVAR>
    {
        expressao.addCodigoInfixo(t.image);
        expressao.addItem(new Item(Tipo.VARIAVEL, t.image));
            
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        } else {
            if (expressao.getTipoDados()==null) {
                char tipo = tabela.getTipoSimbolo(t.image);
                
                expressao.setTipoDados(tipo=='n'?
                                       Tipo.NUMERO :
                                       Tipo.STRING );
            }
            tabela.setUtilizada(t.image);
        }
    }
    
  | t = <PARL>
    {
        expressao.addCodigoInfixo(t.image);
    }
    
    expressaoAuxiliar(expressao)

    try
    {
       t = <PARR>
       {
           expressao.addCodigoInfixo(t.image);
       }
    } catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}

void declaraVar() : {Simbolo simb; Token t=null; char tp;}
{
    ( <TIPONUM> {tp='n';} | <TIPOSTRING> {tp='s';} )
    t = <NOMEVAR>
    {
        if(!tabela.isExiste(t.image)) {
            simb = new Simbolo(t.image); 
            simb.setTipo(tp);
            simb.setReferencia(tp); 
            tabela.inclui(simb);
        } else {    
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " já foi inicializada");
        }
    }
    (
        <VIRG>
        t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) { 
                simb = new Simbolo(t.image); 
                simb.setTipo(tp);
                simb.setReferencia(tp); 
                tabela.inclui(simb);
            } else {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " já foi inicializada");
            }     
        }
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

ListaComandos atribVar() : { Simbolo simbolo; Token t=null; LinkedList <Item> listaVar = new LinkedList<Item>();
  char tipo;Expressao expressao=new Expressao();LinkedList<Expressao> listaExpressoes = new LinkedList<Expressao>();
  ListaComandos listaAtribuicoes = new ListaComandos();}
{
    t = <NOMEVAR>
    {
      	listaExpTipo.clear();
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semantico \n A variavel "+t.image+
                          " nao foi inicializada");
        }
        else {
          	tabela.setInicializada(t.image);        }
       	tipo = tabela.getTipoSimbolo(t.image);
        if(tipo=='n') {
         	listaVar.add(new Item(Tipo.NUMERO, t.image));      
        }
        else {
          	listaVar.add(new Item(Tipo.STRING, t.image));
        }
    }
    (
        <VIRG>
        t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            }
            else {
	          	tabela.setInicializada(t.image);
	        }
	       	tipo = tabela.getTipoSimbolo(t.image);
		    if(tipo=='n') {
		      	listaVar.add(new Item(Tipo.NUMERO, t.image));      
		    }
		    else {
		     	 listaVar.add(new Item(Tipo.STRING, t.image));
        	} 
        }
    )*
    <ATRIB>
    expressao = expressao()
    {
      	listaExpressoes.add(expressao);
    }
    (
        <VIRG> expressao = expressao()
        {
				listaExpressoes.add(expressao);
        }
        
    )*
    try
    {
        <PTVIRG>
    } catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
    {
        Tipo iVar, iExp;
        Item var;
        Expressao exp;
        Iterator<Tipo> itExp = listaExpTipo.iterator();
        Iterator<Expressao> iteExpressao = listaExpressoes.iterator();
        for (Iterator<Item> itVar = listaVar.iterator(); itVar.hasNext();) {
            var = itVar.next();
            iVar = var.getTipo();
            iExp = itExp.next();
            exp = iteExpressao.next();
            String tipoExp;
            if (iExp == Tipo.NUMERO)
                tipoExp = "numerico";
            else
                tipoExp = "string";
            if (iVar != iExp)
            { 
                System.out.println("Erro semântico \nVariável " +
                                   var.getValor() +
                                   " não é do tipo " + tipoExp);
          	tabela.setInicializada(var.getValor());
         }

         
        }
    }
    // Cria as instancias de atribuições para cada comando de atribuição
     {
        Tipo iVar1, iExp1;
        Item var1;
        Expressao exp1;
        Iterator<Tipo> itExp1 = listaExpTipo.iterator();
        Iterator<Expressao> iteExpressao1 = listaExpressoes.iterator();
        for (Iterator<Item> itVar1 = listaVar.iterator(); itVar1.hasNext();) {
            var1 = itVar1.next();
            iExp1 = itExp1.next();
            exp1 = iteExpressao1.next();

            Atribuicao atribuicao= new Atribuicao(var1.getValor(),exp1);
            listaAtribuicoes.insere(atribuicao);
       }
         
        }
       {
         return listaAtribuicoes;
       }
    }

ListaComandos leia() : {Token t=null, tVar,tStr;EntradaDados entradaDados;Item item;
				ListaComandos listaAux = new ListaComandos(); Exibe exibe;}
{
    <LEIA>
    (
	    tStr = <STRING>
	    {
			exibe = new Exibe(Tipo.STRING,tStr.image);
			listaAux.insere(exibe);
	  	}
		
	    <VIRG>
    )*

    tVar = <NOMEVAR>
    {
        if(!tabela.isExiste(tVar.image)) {
            erroSemantico("Erro semântico \n A variável "+tVar.image+
                          " não foi inicializada");                          
        } else
        {
			tabela.setInicializada(tVar.image);
			entradaDados = new EntradaDados();
			item = new Item(Tipo.VARIAVEL,tVar.image);
			entradaDados.setItem(item);
			listaAux.insere((Comando) entradaDados);
       	} 
    }

    (
        <VIRG>
        (
            tVar = <NOMEVAR>
            {
                if(!tabela.isExiste(tVar.image)) {
                    erroSemantico("Erro semântico \n A variável "+
                                  tVar.image+ " não foi inicializada");
                } else
		        {
					tabela.setInicializada(tVar.image);
					entradaDados = new EntradaDados();
					item = new Item(Tipo.VARIAVEL,tVar.image);
					entradaDados.setItem(item);
					listaAux.insere((Comando) entradaDados);
		       	} 
            }
          |
          tStr = <STRING>
          {
	            exibe = new Exibe(Tipo.STRING,tStr.image);
				listaAux.insere(exibe);
          }
        )
    )*
    try
    {
        <PTVIRG>
        {
         	return listaAux;
        }
    } catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

ListaComandos exibe() : {Token t=null; ListaComandos exibir = new ListaComandos();}
{
    <EXIBE>
    (
        t = <STRING>
        {
          exibir.insere(new Exibe(Tipo.STRING,t.image));
        }
      | t = <NUMERO>
      	{
          exibir.insere(new Exibe(Tipo.NUMERO,t.image));
        }
      | t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            } else
	        {
				tabela.setUtilizada(t.image);
	       	}
	       	exibir.insere(new Exibe(Tipo.VARIAVEL,t.image)); 
        }
    )
    (
        <VIRG>
        (
            t = <STRING>
            {
              exibir.insere(new Exibe(Tipo.STRING,t.image));
           	} 
          | t = <NUMERO>
          	{
          	  exibir.insere(new Exibe(Tipo.NUMERO,t.image));
          	}
          | t = <NOMEVAR>
            {
                if(!tabela.isExiste(t.image))
                {

                  
                    erroSemantico("Erro semântico \n A variável "+t.image+
                                  " não foi inicializada");
                } else
		        {
					tabela.setUtilizada(t.image);
		       	}
		       	exibir.insere(new Exibe(Tipo.VARIAVEL,t.image));
            }
        )
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
  	{
  	  return exibir;
  	}
    
}

Condicional comandoSe() : {Condicional condicional, condicionalAux, condicionalLast; ListaComandos listaAux;}
{
    condicional = blocoSe()
	{
	  	condicionalLast = condicional;
	}
	
    (
      	condicionalAux = blocoSenaoSe()
      	{
      	  	listaAux = new ListaComandos();
      	  	listaAux.insere(condicionalAux);
      	  	condicionalLast.setFalso(listaAux);
      	  	listaAux = null;
      	  	condicionalLast = condicionalAux;
      	}
 	)*

 	(
 	  	listaAux = blocoSenao()
 	  	{
 	  	  	condicionalLast.setFalso(listaAux);
 	  	}
	)?

	<FIMSE>

	{
	  	return condicional;
	}
}

Condicional blocoSe() : {Condicional condicional = new Condicional(); Expressao expressao; ListaComandos verdadeiro;}
{
    <SE> <PARL>

    expressao = expressao()
    {
      	if(expressao.isSomenteConstanteNumerica())
      	{
      	  	erroSemantico("Warning: expressao constante em condicional na linha " + expressao.getLinha() + ".");
      	}    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    verdadeiro = listaComandos()

    {
      	condicional.setExpressao(expressao);
      	condicional.setVerdadeiro(verdadeiro);
      	return condicional;
    }
}

Condicional blocoSenaoSe() : {Condicional condicional = new Condicional(); Expressao expressao; ListaComandos verdadeiro;}
{
    <SENAOSE> <PARL>

    expressao = expressao()

    {
      	condicional.setExpressao(expressao);
      	if(expressao.isSomenteConstanteNumerica())
      	{
      	  	erroSemantico("Warning: expressao constante em condicional na linha " + expressao.getLinha() + ".");
      	}
    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    verdadeiro = listaComandos()

    {
      	condicional.setExpressao(expressao);
      	condicional.setVerdadeiro(verdadeiro);
      	return condicional;
    }
}

ListaComandos blocoSenao() : {ListaComandos listaComandos;}
{
    <SENAO>
    listaComandos = listaComandos()
    {
      	return listaComandos;
    }
}


Condicional comandoEscolha() : {Expressao expressaoEscolha; Condicional condicional = null; Condicional condicionalLast, condicionalAux; ListaComandos listaAux;}
{
    expressaoEscolha = expEscolha()
    {
      	condicionalLast = condicional;
    }
    (
      	condicionalAux = expCaso(expressaoEscolha)
      	{
      	  	if(condicionalLast == null)
      	  	{
				condicional = condicionalAux;
				condicionalLast = condicional;
      	  	}
      	  	else
      	  	{
      	  	  	listaAux = new ListaComandos();
	      	  	listaAux.insere(condicionalAux);
	      	  	condicionalLast.setFalso(listaAux);
	      	  	listaAux = null;
	      	  	condicionalLast = condicionalAux;
      	  	}
      	}
    )+
    (
      	listaAux = expOutros()
      	{
      	  	condicionalLast.setFalso(listaAux);
      	}
   	)?
    <FIMESCOLHA>
    {
      	return condicional;
    }
}

Expressao expEscolha() : {Expressao expressao;}
{
    <ESCOLHA> <PARL>

    expressao = expressao()

    {
      	if(expressao.isSomenteConstanteNumerica())
      	{
      	  	erroSemantico("Warning: expressao constante em condicional na linha " + expressao.getLinha() + ".");
      	}    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
    {
      	return expressao;
    }
}

Condicional expCaso(Expressao expressaoEscolha) : {Expressao expressao; ListaComandos verdadeiro; Condicional condicional = new Condicional();}
{
    <CASO> <PARL>

    expressao = expressao()

    {
      	Item item = new Item(Tipo.OPERADOR, "==");
      	expressao.addExpressao(expressaoEscolha);
      	expressao.addItem(item);
      	if(expressao.isSomenteConstanteNumerica())
      	{
      	  	erroSemantico("Warning: expressao constante em condicional na linha " + expressao.getLinha() + ".");
      	}
    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    verdadeiro = listaComandos()
    {
      	condicional.setExpressao(expressao);
      	condicional.setVerdadeiro(verdadeiro);
      	return condicional;
    }
}

ListaComandos expOutros() : {ListaComandos listaComandos;}
{
    <OUTROS>
    listaComandos = listaComandos()
    {
      	return listaComandos;
    }
}

Comando comandoEnquanto() : {Enquanto enquanto = new Enquanto(); Expressao condicao; ListaComandos listaComandos;}
{
    <ENQUANTO> <PARL>

    condicao = expressao()
    {
    	enquanto.setCondicao(condicao);
       	if(condicao.isSomenteConstanteNumerica())
      	{
      	  	erroSemantico("Warning: expressao constante em laco enquanto na linha " + condicao.getLinha() + ".");
      	}
    }
    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
    listaComandos = listaComandos()
    {
    	enquanto.setListaComandos(listaComandos);
   	}
   	<FIMENQUANTO>
   	{   	  return enquanto;
   	}
}

ListaComandos comandoPara() : {
    Token t=null;
    //Simbolo simbolo=null;
    Comando para = new Para ();
    Comando paraMultiplo = new ParaMultiplo ();
    ListaComandos listaCom = new ListaComandos();
    LinkedList<Expressao> listaExpressoes=null;
    Expressao expressaoFim;
    boolean paraSimples = false; }
{
    <PARA> <PARL>

    t = <NOMEVAR>
    {
        if(t!=null && !tabela.isExiste(t.image))
        {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        } else
        {
          	tabela.setInicializada(t.image);
			tabela.setUtilizada(t.image);
       	} 
    }
    
    (
        listaExpressoes = paraSimples(para, t.image)
        {
            expressaoFim = listaExpressoes.get(0);
            paraSimples = true;
        }
      |
        expressaoFim = paraEspecial(paraMultiplo, t.image)
    )

    listaCom = listaComandos()
    {
        String operadorMenorI = tokenImage[MENORIGUAL];
        String operadorMaiorI = tokenImage[MAIORIGUAL];
        operadorMenorI = operadorMenorI.substring(1,operadorMenorI.length()-1);
        operadorMaiorI = operadorMaiorI.substring(1,operadorMaiorI.length()-1);
        
        if (paraSimples) {
            ParaHelper.configuraLacoEnquantoSimples((Para)para,
                                                    listaExpressoes.size()>1 ?
                                                      listaExpressoes.get(1) :
                                                      null,
                                                    expressaoFim,
                                                    listaCom,
                                                    operadorMenorI,
                                                    operadorMaiorI);
        } else {
            ParaHelper.configuraLacoEnquantoMultiplo((ParaMultiplo)paraMultiplo,
                                                     expressaoFim,
                                                     listaCom,
                                                     operadorMenorI,
                                                     operadorMaiorI);
        }
    }

    <FIMPARA>

    {
	    listaCom = new ListaComandos ();
	
	    if (paraSimples) {
	       listaCom.insere(((Para)para).getAtribuicao());
	       listaCom.insere(((Para)para).getEnquanto());
	    }
	    else {
	       LinkedList<Comando> atribuicoes = ((ParaMultiplo)paraMultiplo).getAtribuicoes();
	       for (int i = 0; i < atribuicoes.size(); i++)
	       	  listaCom.insere(atribuicoes.get(i));
	          listaCom.insere(((ParaMultiplo)paraMultiplo).getEnquanto());
	    }
	    return listaCom;
	}
}

LinkedList<Expressao> paraSimples(Comando para, String variavel) : {
    Expressao expressao;
    LinkedList<Expressao> listaExpressoes = new LinkedList<Expressao>(); }
{

    expressao = expressao()
    {
		Comando atribuicao = new Atribuicao (variavel, expressao);
		((Para)para).setAtribuicao(atribuicao);
    }

    <ATE>

    expressao = expressao()
    {
		listaExpressoes.add(expressao);
    }

    (
      <PASSO>

      expressao = expressao()
      {
      	listaExpressoes.add(expressao);
      }
    )?

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    {
      return listaExpressoes;
    }
}

Expressao paraEspecial(Comando paraMultiplo, String variavel) : {
    Token t=null;
    Expressao expressao;
    LinkedList<String> listaVariaveis = new LinkedList<String>(); }
{
    {
        listaVariaveis.add(variavel);
    }
 
    (
        <VIRG> t = <NOMEVAR>
        {
            if(t!=null && !tabela.isExiste(t.image))
            {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            } else
            {
                listaVariaveis.add(t.image);
                tabela.setInicializada(t.image);
                tabela.setUtilizada(t.image);
           	} 
        }
    )+

    expressao = expressao()
    {
        for (int i = 0; i < listaVariaveis.size(); i++) { 
            ((ParaMultiplo)paraMultiplo).insereAtribuicao(
                  new Atribuicao (listaVariaveis.get(i), expressao));
        }
    }
    
    <ATE>

    expressao = expressao()

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
    { 
		return expressao;
  	} 
}

// quest�o 2 da prova simulada
ListaComandos comandoRepeatUntil() :{ ListaComandos listaRepeatUntil;
                                      ListaComandos listaCom = new ListaComandos();
                                      Expressao exp;}{    < REPEAT >

    listaRepeatUntil = listaComandos()

	< UNTIL > < PARL > exp = expressao() < PARR >
    {  		listaCom.insere(listaRepeatUntil);
  		Item itemNot = new Item(Tipo.OPERADOR,"nao");
  		exp.addItem(itemNot);
  		Enquanto comandoEnquanto = new Enquanto(exp, listaRepeatUntil);
  		listaCom.insere(comandoEnquanto);

		// verificacao semantica de warning: expressao condicional constante
		if(exp.isSomenteConstanteNumerica())
		{
			erroSemantico("Warning: expressao constante em repeat until na linha " + exp.getLinha() + ".");
		}    
 
  		return listaCom;
    }   
}

// PROVA
//
Condicional comandoSelect () : {Token v = null; Token n = null; ListaComandos listaVerdadeiro; Expressao condicao = new Expressao();
						LinkedList<Condicional> condicionais = new LinkedList<Condicional>();
						Condicional condicionalFinal = new Condicional();}
{	<SELECT> <PARL>

	v = <NOMEVAR>
	{
        if (!tabela.isExiste(v.image)) {
            erroSemantico("Erro semantico: A variavel "+v.image+
                          " nao foi declarada");
        }
        else {
          	if (!tabela.isInicializada(v.image))
          		erroSemantico("Erro semantico: A variavel "+v.image+
                          " nao foi inicializada");
            else           	{
	            tabela.setUtilizada(v.image);
		        if (tabela.getTipoSimbolo(v.image) != 'n')
		        	erroSemantico("Erro semantico: A variavel "+v.image+
		                          " deve ser do tipo numero");
		     }
	    }
    }
    
	try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

	(
	  	<OPTION> <PARL>

	  	n = <NUMERO>
	  	{
	  	    condicao.addItem(new Item (Tipo.VARIAVEL, v.image));
	  	  	condicao.addItem(new Item (Tipo.NUMERO, n.image));
	  	  	condicao.addItem(new Item (Tipo.OPERADOR, "=="));
	 	}

	  	(
	  	  	<VIRG>

		  	n = <NUMERO>
		  	{	  	  
		  		condicao.addItem(new Item (Tipo.VARIAVEL, v.image));
		  		condicao.addItem(new Item (Tipo.NUMERO, n.image));
		  		condicao.addItem(new Item (Tipo.OPERADOR, "=="));
		  		condicao.addItem(new Item (Tipo.OPERADOR, "ou"));
		 	}

	  	)*

	  	try
	    {
	       <PARR>
	    }
	    catch(ParseException e) {
	        erroSintaticoPanico("Fecha parenteses",PTVIRG);
	    }

	  	listaVerdadeiro = listaComandos()

	  	{
	  	  Condicional condicional = new Condicional ();	  	  condicional.setExpressao(condicao);
	  	  condicional.setVerdadeiro(listaVerdadeiro);
	  	  condicionais.add(condicional);
	  	  condicao = new Expressao ();
	  	}
	)+

	{	  for (int i = condicionais.size()-2; i >= 0; i--)	  {
	    ListaComandos listaFalso = new ListaComandos ();	    Condicional penultima = condicionais.get(i);
	    Condicional ultima = condicionais.get(i+1);
	    listaFalso.insere(ultima);
	  	penultima.setFalso(listaFalso);
	  }	
	  condicionalFinal = condicionais.get(0);
	}

	<ENDSELECT>

	{	   return condicionalFinal;
	}
}