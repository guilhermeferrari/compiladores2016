options  
{
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

import java.io.*;
import minhasclasses.*;
import minhasclasses.comandos.*;
import java.util.Iterator;
import java.util.LinkedList;

public class Compilador
{
    static Tabela tabela = new Tabela();
    static LinkedList <Tipo> listaExp = new LinkedList<Tipo>();
    static boolean varWarning = false;
    public static void main (String args []) throws ParseException
    { 
        Compilador compilador = null;
        while (true)
        {
            System.out.println("Fazendo analise...");
            try
            {
                compilador = new Compilador(new FileInputStream("exemplo3.hue"));
                compilador.inicio();
                compilador.warning();
                System.out.println("\nEnd of compilation.\n");
                break;
            }
            catch(FileNotFoundException e)
            {
                System.out.println("Erro: arquivo nao encontrado!\n");
                break;
            }
            catch(TokenMgrError e)
            {
                System.out.println("Erro lexico\n" + e.getMessage());
                break;
            }

            catch(ParseException e)
            {
                 System.out.println("Erro sintatico\n" + e.getMessage());
                 break;
            }
        }
    }

    // kindSincronizacao representa o kind do token para a resincronizacao do
    // compilador.
    // Retorna um token anterior ao token de sincronização.
    static public void erroSintaticoPanico(String esperado, int kindSincronizacao)
    {
        Token t = getToken(1);
        System.out.print("\n++ Erro sintatico (linha "+t.beginLine);
        System.out.println(", coluna "+t.beginColumn+") ++");
        System.out.print("Encontrou \'"+t.image+"\'. ");
        System.out.println("Era esperado: "+esperado);
        if (t.kind != kindSincronizacao) {
            // kind 0 representa <EOF>
            while(t.kind!=kindSincronizacao && t.kind != 0) {
                t = getNextToken();
            }
        }
    }

    static public void erroSemantico(String s)
    {
        System.out.println(s);
    }

    public static void warning()
    {
        tabela.warningVar();
    }
      
}
PARSER_END(Compilador)

SKIP :
{
        " "
    |   "\r"
    |   "\t"
    |   "\n"
}

/*
    SKIP que ser� usado para os coment�rios
*/

SKIP : { "/*" : comentarioCompleto }

<comentarioCompleto>

SKIP: { "*/" : DEFAULT | <~[]> }

SKIP : { "//" : comentarioLinha }

<comentarioLinha>

SKIP: { "\n" : DEFAULT | <~[]> }

TOKEN :
{
        < NUMERO : (["0" - "9"])*(".")?(["0" - "9"])+ > 
    |   < STRING : ("\"")(~["\""])*("\"") >
    |   < NOMEVAR : ("_")(["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
    |   < ATRIB : "=" >
    |   < EXIBE : "exibe" >
    |   < LEIA : "leia" >
    |   < TIPONUM : "numero" >
    |   < TIPOSTRING : "string" >
    |   < PARL : "(" >
    |   < PARR : ")" >
    |   < POT : "^" >
    |   < MULT : "*" >
    |   < DIV : "/" >
    |   < ADD : "+" >
    |   < SUB : "-" >
    |   < MAIOR : ">" >
    |   < MENOR : "<" >
    |   < MAIORIGUAL : ">=" >
    |   < MENORIGUAL : "<=" >
    |   < DIFERENTE : "!=" >
    |   < COMPARA : "==" >
    |   < E : "e" >
    |   < OU : "ou" >
    |   < NAO : "nao" >
    |   < OUCC : "OU" >
    |   < SE : "se" >
    |   < SENAOSE : "senaoSe" >
    |   < SENAO : "senao" >
    |   < FIMSE : "fimSe" >
    |   < ESCOLHA : "escolha" >
    |   < CASO : "caso" >
    |   < OUTROS : "outros" >
    |   < FIMESCOLHA : "fimEscolha" >
    |   < ENQUANTO : "enquanto" >
    |   < FIMENQUANTO : "fimEnquanto" >
    |   < PARA : "para" >
    |   < ATE : "ate" >
    |   < PASSO : "passo" >
    |   < FIMPARA : "fimPara" >
    |   < PTVIRG : ";" >
    |   < VIRG : "," >
}

void inicio() : {}
{
    listaComandos() <EOF>
}

ListaComandos listaComandos() : { ListaComandos listaComandos = null; }
{
    (comando())*
    {
        return listaComandos;
    }
}

void comando() : { }
{
        atribVar()
    |   declaraVar()
    |   leia()
    |   exibe()
    |   comandoSe()
    |   comandoEscolha()
    |   comandoEnquanto()
    |   comandoPara()
}

Expressao expressao() : { Expressao expressao=new Expressao(); Item item=null;
Token t=null; expressao.setLinha(getToken(1).beginLine);}
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {	
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*

    //Analisador semântico - Parte 2
    {
        //TipoDados tipoExp;
        Tipo valor = null;
 
        for (Iterator<Item> i = expressao.getListaExpressao().iterator();
             i.hasNext();)
        {
            Item ii = i.next();
            if (valor==null) {
                valor = ii.getTipo();
                if(valor==Tipo.NUMERO) {
                    listaExp.add(Tipo.NUMERO);
          	    }
                if (valor==Tipo.STRING) {
                  listaExp.add(Tipo.STRING);
                } else if(valor==Tipo.VARIAVEL) {
                    if (!tabela.isInicializada(ii.getValor()))
                        System.out.println("Erro semântico \nVariável não"+
                                           "inicializada: " + ii.getValor());
                    if(tabela.getTipoSimbolo(ii.getValor())=='n') {
                        valor = Tipo.NUMERO;
                        listaExp.add(Tipo.NUMERO);     
                    } else {
                        valor = Tipo.STRING;
                        listaExp.add(Tipo.STRING);
                    }
                }          
            } else if ( (ii.getTipo()!=Tipo.OPERADOR) &&
                        (valor!=ii.getTipo()) )
            {
                if(ii.getTipo()==Tipo.VARIAVEL) {
                    if (!tabela.isInicializada(ii.getValor()))
                        System.out.println("Erro semântico \nVariável não"+
                                           " inicializada: " + ii.getValor());
                    if(tabela.getTipoSimbolo(ii.getValor())=='n') {
                        if(valor!=Tipo.NUMERO) {
                            System.out.println("Erro semântico, expressões"+
                                               " não compativeis: "+
                                               expressao.getCodigoInfixo()+
                                               "\n");
                        }
                    } else {
                        if(valor!=Tipo.STRING) {
                            System.out.println("Erro semântico, expressões"+
                                               " não compativeis: "+
                                               expressao.getCodigoInfixo()+
                                               "\n");
                        }
                    }
                } else {
                    System.out.println("Erro semântico, expressões não"+
                                       " compativeis: "+
                                       expressao.getCodigoInfixo()+ "\n");
                }
            }

            if( (ii.getTipo()==Tipo.OPERADOR) &&
                (ii.getValor() != "+") &&
                (valor==Tipo.STRING))
  	        {
  	            System.out.println("Erro semântico, expressões não"+
  	                               " compativeis: "+
  	                               expressao.getCodigoInfixo()+ "\n");
  	        }
        }

        if(varWarning)
        {
          	boolean aux = true;
          	for (Item i : expressao.getListaExpressao())
        	{
				if(i.getTipo().getValor() == 4)
				{
					aux = false;
					break;
				}
       		}
       		if(aux)
       		{
       		  	System.out.println("Warning: expressao constante na linha " + expressao.getLinha() + ".");
       		}
        }
        return expressao;
    }

    /*{
        System.out.println("Linha da expressao: "+expressao.getLinha());
        System.out.println("Expressao infixa:\n"+expressao.getCodigoInfixo());
        System.out.println("Expressao posfixa:\n"+expressao);
    }*/
}

void expressaoAuxiliar(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
      	{
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo1(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo2(expressao)
    (
        t = <E>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo2(expressao)
        {
            item=new Item(Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo2(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo3(expressao)
    (
        t = <MAIOR>
        {
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENOR>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MAIORIGUAL>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENORIGUAL>
     	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <DIFERENTE>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <COMPARA>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(Tipo.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo3(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo4(expressao)
    (
        t = <ADD>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <SUB>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo4(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo5(expressao)
    (
        t = <MULT>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
            item = new Item (Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <DIV>
        termo5(expressao)
    )*
}

void termo5(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo6(expressao)
    (
        t = <POT>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
            item = new Item (Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )?
}

void termo6(Expressao expressao) : { Token t=null; int cont=0; }
{
    (
        t = <NAO>
        {
            expressao.addCodigoInfixo(t.image);
            cont++;
        }
    )*
    fator(expressao)
    {
        if(t!=null) {
            //if ((cont % 2) == 1)
            while(cont!=0) { 
                expressao.addItem(new Item(Tipo.OPERADOR, t.image));
                cont--;
            }
        }
    }
}

void fator(Expressao expressao) : { Token t=null; Token t1=null;
Item item = null;}
{
    (<ADD> | t1=<SUB>)?
    t = <NUMERO>
    {
        if (t1!=null)
            item = new Item( Tipo.NUMERO,
                             String.valueOf(Float.parseFloat(t.image)*-1) );
        else
            item = new Item( Tipo.NUMERO, t.image );
        expressao.addCodigoInfixo(item.getValor());
        expressao.addItem(item);

        if (expressao.getTipoDados()==null)
            expressao.setTipoDados(Tipo.NUMERO);
    }
  | t = <STRING>
    {
        expressao.addCodigoInfixo(t.image);
        expressao.addItem(new Item(Tipo.STRING, t.image));
        
        if (expressao.getTipoDados()==null)
            expressao.setTipoDados(Tipo.STRING);
    }
  | t = <NOMEVAR>
    {
        expressao.addCodigoInfixo(t.image);
        expressao.addItem(new Item(Tipo.VARIAVEL, t.image));
            
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        } else {
            if (expressao.getTipoDados()==null) {
                char tipo = tabela.getTipoSimbolo(t.image);
                
                expressao.setTipoDados(tipo=='n'?
                                       Tipo.NUMERO :
                                       Tipo.STRING );
            }
            tabela.setUtilizada(t.image);
        }
    }
    
  | t = <PARL>
    {
        expressao.addCodigoInfixo(t.image);
    }
    
    expressaoAuxiliar(expressao)

    try
    {
       t = <PARR>
       {
           expressao.addCodigoInfixo(t.image);
       }
    } catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}

void declaraVar() : {Simbolo simb; Token t=null; char tp;}
{
    ( <TIPONUM> {tp='n';} | <TIPOSTRING> {tp='s';} )
    t = <NOMEVAR>
    {
        if(!tabela.isExiste(t.image)) {
            simb = new Simbolo(t.image); 
            simb.setTipo(tp);
            simb.setReferencia(tp); 
            tabela.inclui(simb);
        } else {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " já foi inicializada");
        }
    }
    (
        <VIRG>
        t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) { 
                simb = new Simbolo(t.image); 
                simb.setTipo(tp);
                simb.setReferencia(tp); 
                tabela.inclui(simb);
            } else {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " já foi inicializada");
            }     
        }
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void atribVar() : { Simbolo simbolo; Token t=null; LinkedList <Item> listaVar = new LinkedList<Item>();
  char tipo;}
{
    t = <NOMEVAR>
    {
      	listaExp.clear();
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        }
       	tipo = tabela.getTipoSimbolo(t.image);
        if(tipo=='n') {
         	listaVar.add(new Item(Tipo.NUMERO, t.image));      
        }
        else {
          	listaVar.add(new Item(Tipo.STRING, t.image));
        }
    }
    (
        <VIRG>
        t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            }
	       	tipo = tabela.getTipoSimbolo(t.image);
		    if(tipo=='n') {
		      	listaVar.add(new Item(Tipo.NUMERO, t.image));      
		    }
		    else {
		     	 listaVar.add(new Item(Tipo.STRING, t.image));
        	} 
        }
    )*

    <ATRIB>

    expressao()
    (
        <VIRG> expressao()
    )*

    try
    {
        <PTVIRG>
    } catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }

    {
        Tipo iVar, iExp;
        Item var;
        Iterator<Tipo> itExp = listaExp.iterator();
        for (Iterator<Item> itVar = listaVar.iterator(); itVar.hasNext();) {
            var = itVar.next();
            iVar = var.getTipo();
            iExp = itExp.next();
            String tipoExp;
            if (iExp == Tipo.NUMERO)
                tipoExp = "numerico";
            else
                tipoExp = "string";
            if (iVar != iExp)
                System.out.println("Erro semântico \nVariável " +
                                   var.getValor() +
                                   " não é do tipo " + tipoExp);
          	tabela.setInicializada(var.getValor());
        }
    }
}

ListaComandos leia() : {Token t=null, tVar,tStr;EntradaDados entradaDados;Item item;
				ListaComandos listaAux = new ListaComandos(); }
{
    <LEIA>
    (
	    tStr = <STRING>
	    {
			/*exibicao = new Exibicao();
			listaAux.insere((Comando) exibicao);*/
	  	}
		
	    <VIRG>
    )*

    tVar = <NOMEVAR>
    {
        if(!tabela.isExiste(tVar.image)) {
            erroSemantico("Erro semântico \n A variável "+tVar.image+
                          " não foi inicializada");
        } else
        {
			tabela.setInicializada(tVar.image);
			entradaDados = new EntradaDados();
			item = new Item(Tipo.VARIAVEL,tVar.image);
			entradaDados.setItem(item);
			listaAux.insere((Comando) entradaDados);
       	} 
    }

    (
        <VIRG>
        (
            tVar = <NOMEVAR>
            {
                if(!tabela.isExiste(tVar.image)) {
                    erroSemantico("Erro semântico \n A variável "+
                                  tVar.image+ " não foi inicializada");
                } else
		        {
					tabela.setInicializada(tVar.image);
					entradaDados = new EntradaDados();
					item = new Item(Tipo.VARIAVEL,tVar.image);
					entradaDados.setItem(item);
					listaAux.insere((Comando) entradaDados);
		       	} 
            }
          |
          tStr = <STRING>
          {
	            /*exibicao = new Exibicao();
				listaAux.insere((Comando) exibicao);*/
          }
        )
    )*
    try
    {
        <PTVIRG>
        {
         	return listaAux;
        }
    } catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void exibe() : {Token t=null;}
{
    <EXIBE>
    (
        <STRING>
      | <NUMERO>
      | t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            } else
	        {
				tabela.setUtilizada(t.image);
	       	} 
        }
    )
    (
        <VIRG>
        (
            <STRING>
          | <NUMERO>
          | t = <NOMEVAR>
            {
                if(!tabela.isExiste(t.image))
                {
                    erroSemantico("Erro semântico \n A variável "+t.image+
                                  " não foi inicializada");
                } else
		        {
					tabela.setUtilizada(t.image);
		       	} 
            }
        )
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void comandoSe() : {Condicional condicional; Condicional condicionalAux; ListaComandos condicionais = new ListaComandos(); ListaComandos listaAux;}
{
    condicional = blocoSe()
    {
      	condicionais.insere(condicional);
    }

   	(
      	condicional = blocoSenaoSe()
      	{
      	  	listaAux = new ListaComandos();
      	  	listaAux.insere(condicional);
      	  	condicionalAux = (Condicional)condicionais.removeUltimo();
      	  	condicionalAux.setFalso(listaAux);
      	  	condicionais.insere(condicionalAux);
      	  	condicionais.insere(condicional);
      	  	listaAux = null;
      	}
    )*

    (
      	listaAux = blocoSenao()
      	{
			condicionalAux = (Condicional)condicionais.removeUltimo();
			condicionalAux.setFalso(listaAux);
			condicionais.insere(condicionalAux);
      	}
   	)?

   	<FIMSE>
}

Condicional blocoSe() : {Condicional condicional = new Condicional(); Expressao expressao; ListaComandos verdadeiro; ListaComandos falso;}
{
    <SE> <PARL>

    {
      varWarning = true;
    }

    expressao = expressao()

    {
      	condicional.setExpressao(expressao);
    }

    {
      varWarning = false;
    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    verdadeiro = listaComandos()

    {
      	condicional.setVerdadeiro(verdadeiro);
      	return condicional;
    }
}

Condicional blocoSenaoSe() : {Condicional condicional = new Condicional(); Expressao expressao; ListaComandos verdadeiro;}
{
    <SENAOSE> <PARL>

	{
      varWarning = true;
    }

    expressao = expressao()

    {
      	condicional.setExpressao(expressao);
    }
    
	{
      varWarning = false;
    }
    
    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    verdadeiro = listaComandos()

    {
		condicional.setVerdadeiro(verdadeiro);
		return condicional;
    }
}

ListaComandos blocoSenao() : {ListaComandos listaComandos;}
{
    <SENAO>
    listaComandos = listaComandos()
    {
      	return listaComandos;
    }
}


void comandoEscolha() : {}
{
    expEscolha() (expCaso())+ (expOutros())? <FIMESCOLHA>
}

void expEscolha() : {}
{
    <ESCOLHA> <PARL>

    {
      varWarning = true;
    }

    expressao()

    {
      varWarning = false;
    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}

void expCaso() : {}
{
    <CASO> <PARL>

    {
      varWarning = true;
    }

    expressao()

    {
      varWarning = false;
    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    listaComandos()
}

void expOutros() : {}
{
    <OUTROS> listaComandos()
}

Comando comandoEnquanto() : {Enquanto enquanto = new Enquanto(); Expressao condicao; ListaComandos listaComandos;}
{
    <ENQUANTO> <PARL>

    {
      varWarning = true;
    }

    condicao = expressao()

    {
    	enquanto.setCondicao(condicao);
    }
    
    {
      varWarning = false;
    }

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    listaComandos = listaComandos()

    {
    	enquanto.setListaComandos(listaComandos);
    }
    
    {
      return enquanto;
   	}
   	<FIMENQUANTO>
}

Comando comandoPara() : {
    Token t=null;
    //Simbolo simbolo=null;
    Comando para = new Para ();
    Comando paraMultiplo = new ParaMultiplo ();
    ListaComandos listaComandos;
    LinkedList<Expressao> listaExpressoes=null;
    Expressao expressaoFim;
    boolean paraSimples = false; }
{
    <PARA> <PARL>

    t = <NOMEVAR>
    {
        if(t!=null && !tabela.isExiste(t.image))
        {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        } else
        {
          	//simbolo = tabela.getSimbolo(t.image);
			tabela.setUtilizada(t.image);
       	} 
    }
    
    (
        listaExpressoes = paraSimples(para, t.image)
        {
            expressaoFim = listaExpressoes.get(0);
            paraSimples = true;
        }
      |
        expressaoFim = paraEspecial(paraMultiplo, t.image)
    )

    listaComandos = listaComandos()
    {
        String operadorMenorI = tokenImage[MENORIGUAL];
        String operadorMaiorI = tokenImage[MAIORIGUAL];
        operadorMenorI = operadorMenorI.substring(1,operadorMenorI.length()-1);
        operadorMaiorI = operadorMaiorI.substring(1,operadorMaiorI.length()-1);
        
        if (paraSimples) {
            ParaHelper.configuraLacoEnquantoSimples((Para)para,
                                                    listaExpressoes.size()>1 ?
                                                      listaExpressoes.get(1) :
                                                      null,
                                                    expressaoFim,
                                                    listaComandos,
                                                    operadorMenorI,
                                                    operadorMaiorI);
        } else {
            ParaHelper.configuraLacoEnquantoMultiplo((ParaMultiplo)paraMultiplo,
                                                     expressaoFim,
                                                     listaComandos,
                                                     operadorMenorI,
                                                     operadorMaiorI);
        }
    }

    <FIMPARA>

    {
      if (paraSimples)
      	return para;
      else
      	return paraMultiplo;
    }
}

LinkedList<Expressao> paraSimples(Comando para, String variavel) : {
    Expressao expressao;
    LinkedList<Expressao> listaExpressoes = new LinkedList<Expressao>(); }
{
	{
      varWarning = true;
    }

    expressao = expressao()
    {
      //Comando atribuicao = new Atribuicao (variavel, expressao);
      //((Para)para).setAtribuicao(atribuicao);
    }

    <ATE>

    expressao = expressao()
    {
      listaExpressoes.add(expressao);
    }

    (
      <PASSO>

      expressao = expressao()
      {
      	listaExpressoes.add(expressao);
      }
    )?

	{
      varWarning = false;
    }
    
    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    {
      return listaExpressoes;
    }
}

Expressao paraEspecial(Comando paraMultiplo, String variavel) : {
    Token t=null;
    Expressao expressao;
    LinkedList<String> listaVariaveis = new LinkedList<String>(); }
{
    {
        listaVariaveis.add(variavel);
    }
 
    (
        <VIRG> t = <NOMEVAR>
        {
            if(t!=null && !tabela.isExiste(t.image))
            {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            } else
            {
                listaVariaveis.add(t.image);
                tabela.setUtilizada(t.image);
           	} 
        }
    )+

    {
      varWarning = true;
    }

    expressao = expressao()
    {
        for (int i = 0; i < listaVariaveis.size(); i++) { 
            //((ParaMultiplo)paraMultiplo).insereAtribuicao(
                  //new Atribuicao (listaVariaveis.get(i), expressao));
        }
    }
    
    <ATE>

    expressao = expressao()
    {
        varWarning = false;
    }

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
    
    { 
        return expressao;
    } 
}
