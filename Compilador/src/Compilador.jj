options  
{
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

import java.io.*;
import minhasclasses.*;

public class Compilador
{
    static Tabela tabela = new Tabela();
    public static void main (String args []) throws ParseException
    { 
        Compilador compilador = null;
        while (true)
        {
            System.out.println("Fazendo analise...");
            try
            {
                compilador = new Compilador(new FileInputStream("exemplo4.hue"));
                
                compilador.inicio();
                System.out.println("\nEnd of compilation.\n");
                break;
            }
            catch(FileNotFoundException e)
            {
                System.out.println("Erro: arquivo nao encontrado!\n");
                break;
            }
            catch(TokenMgrError e)
            {
                System.out.println("Erro lexico\n" + e.getMessage());
                break;
            }

            catch(ParseException e)
            {
                 System.out.println("Erro sintatico\n" + e.getMessage());
                 break;
            }
        }
    }

    // kindSincronizacao representa o kind do token para a resincronizacao do
    // compilador.
    // Retorna um token anterior ao token de sincronização.
    static public void erroSintaticoPanico(String esperado, int kindSincronizacao)
    {
        Token t = getNextToken();
        System.out.print("\n++ Erro sintatico (linha "+t.beginLine);
        System.out.println(", coluna "+t.beginColumn+") ++");
        System.out.print("Encontrou \'"+t.image+"\'. ");
        System.out.println("Era esperado: "+esperado);
        if (t.kind != kindSincronizacao) {
            // kind 0 representa <EOF>
            while(t.kind!=kindSincronizacao && t.kind != 0) {
                t = getNextToken();
            }
        }
    }

    // Método usado para a sincronização por recuperação de erro local.
    static public void erroSintaticoLocal(String esperado) {
        Token t = getToken(1);
        System.out.print("\n++ Erro sintatico (linha "+t.beginLine);
        System.out.println(", coluna "+t.beginColumn+") ++");
        System.out.print("Encontrou \'"+(t.kind==0?"EOF":t.image)+"\'. ");
        System.out.println("Era esperado: "+esperado);
    }

    static public void erroSemantico(String s)
    {
        System.out.println(s);
    }
      
}
PARSER_END(Compilador)

SKIP :
{
        " "
    |   "\r"
    |   "\t"
    |   "\n"
}

/*
    SKIP que ser� usado para os coment�rios
*/

SKIP : { "/*" : comentarioCompleto }

<comentarioCompleto>

SKIP: { "*/" : DEFAULT | <~[]> }

SKIP : { "//" : comentarioLinha }

<comentarioLinha>

SKIP: { "\n" : DEFAULT | <~[]> }

TOKEN :
{
        < NUMERO : (["0" - "9"])*(".")?(["0" - "9"])+ > 
    |   < STRING : ("\"")(~["\""])*("\"") >
    |   < NOMEVAR : ("_")(["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
    |   < ATRIB : "=" >
    |   < EXIBE : "exibe" >
    |   < LEIA : "leia" >
    |   < TIPONUM : "numero" >
    |   < TIPOSTRING : "string" >
    |   < PARL : "(" >
    |   < PARR : ")" >
    |   < POT : "^" >
    |   < MULT : "*" >
    |   < DIV : "/" >
    |   < ADD : "+" >
    |   < SUB : "-" >
    |   < MAIOR : ">" >
    |   < MENOR : "<" >
    |   < MAIORIGUAL : ">=" >
    |   < MENORIGUAL : "<=" >
    |   < DIFERENTE : "!=" >
    |   < COMPARA : "==" >
    |   < E : "e" >
    |   < OU : "ou" >
    |   < NAO : "nao" >
    |   < OUCC : "OU" >
    |   < SE : "se" >
    |   < SENAOSE : "senaoSe" >
    |   < SENAO : "senao" >
    |   < FIMSE : "fimSe" >
    |   < ESCOLHA : "escolha" >
    |   < CASO : "caso" >
    |   < OUTROS : "outros" >
    |   < FIMESCOLHA : "fimEscolha" >
    |   < ENQUANTO : "enquanto" >
    |   < FIMENQUANTO : "fimEnquanto" >
    |   < PARA : "para" >
    |   < ATE : "ate" >
    |   < PASSO : "passo" >
    |   < FIMPARA : "fimPara" >
    |   < PTVIRG : ";" >
    |   < VIRG : "," >
}

void inicio() : {}
{
    listaComandos() <EOF>
}

void listaComandos() : { }
{
    (comando())*    
}

void comando() : { }
{
        atribVar()
    |   declaraVar()
    |   leia()
    |   exibe()
    |   comandoSe()
    |   comandoEscolha()
    |   comandoEnquanto()
    |   comandoPara()
}

void expressao() : { Expressao expressao=new Expressao(); Item item=null;
Token t=null; expressao.setLinha(token.beginLine);}
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void expressaoAuxiliar(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
      	{
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo1(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo2(expressao)
    (
        t = <E>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo2(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo2(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo3(expressao)
    (
        t = <MAIOR>
        {
          expressao.addCodigoInfixo(t.image);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENOR>
      	{
          expressao.addCodigoInfixo(t.image);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MAIORIGUAL>
      	{
          expressao.addCodigoInfixo(t.image);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENORIGUAL>
     	{
          expressao.addCodigoInfixo(t.image);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <DIFERENTE>
      	{
          expressao.addCodigoInfixo(t.image);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <COMPARA>
      	{
          expressao.addCodigoInfixo(t.image);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo3(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo4(expressao)
    (
        t = <ADD>
        {
          expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <SUB>
        {
          expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo4(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo5(expressao)
    (
        t = <MULT>
        {
          expressao.addCodigoInfixo(t.image);        }
        termo5(expressao)
        {
          item = new Item (Item.Tipo.OPERADOR,t.image);
          expressao.addItem(item);
        }
      | t = <DIV>
        termo5(expressao)
    )*
}

void termo5(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo6(expressao)
    (
        t = <POT>
        {
          expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
          item = new Item (Item.Tipo.OPERADOR,t.image);
          expressao.addItem(item);
        }
    )?
}

void termo6(Expressao expressao) : { Token t=null; }
{
    (
        t = <NAO>
        {
            expressao.addCodigoInfixo(t.image);
        }
    )*
    fator(expressao)
    {
        if(t!=null)
            expressao.addItem(new Item(Item.Tipo.OPERADOR, t.image));
    }
}

void fator(Expressao expressao) : { Token t=null; Token t1=null; Item item = null;}
{
    (<ADD> | t1=<SUB>)? t = <NUMERO>
    {
        if (t1!=null)
            item = new Item( Item.Tipo.NUMERO, String.valueOf(Integer.parseInt(t.image)*-1) );
        else
            item = new Item( Item.Tipo.NUMERO, t.image );
        expressao.addItem(item);
    }
  | t = <STRING>
    {
      expressao.addItem(new Item(Item.Tipo.STRING, t.image));
    }
  | t = <NOMEVAR>
    {
        expressao.addItem(new Item(Item.Tipo.VARIAVEL, t.image));
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+" não foi inicializada");
        }
    }
    
  | t = <PARL>
    {
        expressao.addCodigoInfixo(t.image);
    }
    
    expressaoAuxiliar(expressao)

    try
    {
        t = <PARR>
        {
          expressao.addCodigoInfixo(t.image);
        }
    } catch(ParseException e) {
        t = getToken(1);
        // Caso de esquecimento de operador. (3+5+4-9/4 5*k)
        //                                   aqui ---> ^
        if (t.kind==NOMEVAR ||
            t.kind==NUMERO ||
            t.kind==STRING ||
            t.kind==PARL ||
            t.kind==NAO)
            erroSintaticoPanico("Algum operador",PARR);
        else
            erroSintaticoLocal("Fecha Parenteses");
    }
}

void declaraVar() : {Simbolo simb; Token t=null; char tp;}
{
    ( <TIPONUM> {tp='n';} | <TIPOSTRING> {tp='s';} )
    try { 
        t = <NOMEVAR>
    } catch(ParseException e) {
        erroSintaticoLocal("Nome de variável");
    }
    {
        if(!tabela.isExiste(t.image)) {
            simb = new Simbolo(t.image); 
            simb.setTipo(tp);
            simb.setReferencia(tp); 
            tabela.inclui(simb);
        } else {
            erroSemantico("Erro semântico \n A variável "+t.image+" já foi inicializada");
        }
    }
    (
        <VIRG>
        try
        {
            t = <NOMEVAR>
            {
                if(!tabela.isExiste(t.image)) { 
                    simb = new Simbolo(t.image); 
                    simb.setTipo(tp);
                    simb.setReferencia(tp); 
                    tabela.inclui(simb);
                } else {
                    erroSemantico("Erro semântico \n A variável "+t.image+" já foi inicializada");
                }     
            }
        } catch(ParseException e) {
            erroSintaticoLocal("Variável");
        }
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        t = getToken(1);
        // Caso em que há uma variavel e o programador tenha esquecido da
        // virgula antes do token. numero _x, _y, _z _k;
        //                                aqui ---> ^
        if (t.kind==NOMEVAR)
            erroSintaticoPanico("Vírgula",PTVIRG);
        else
            erroSintaticoLocal("Ponto-e-virgula");
        // Caso em que se esquece do uso do ponto e virgula.
    }
}

void atribVar() : { Simbolo simbolo; Token t=null; }
{
    t = <NOMEVAR>
    {
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+" não foi inicializada");
        }
    }
    (
        <VIRG>
        try
        { 
            t = <NOMEVAR>
        } catch(ParseException e) {
            erroSintaticoLocal("Variável");
        }
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+" não foi inicializada");
            }
        }
    )*

    try
    { 
        <ATRIB>
    } catch(ParseException e) {
        erroSintaticoLocal("=");
        getNextToken();
    }

    expressao()
    (
        <VIRG>
        try
        {
            expressao()
        } catch(ParseException e) {
            erroSintaticoLocal("Expressao");
        }
    )*

    try
    {
        <PTVIRG>
    } catch(ParseException e) {
        t = getToken(1);
        // Caso de esquecimento de virgula. _x, _y, _z = _k, 2 3;
        //                                          aqui ---> ^
        if (t.kind==NOMEVAR ||
            t.kind==NUMERO ||
            t.kind==STRING ||
            t.kind==PARL ||
            t.kind==NAO)
            erroSintaticoPanico("Vírgula",PTVIRG);
        else
            erroSintaticoLocal("Ponto-e-virgula");
        // Caso em que se esquece do uso do ponto e virgula.
    }
}

void leia() : {Token t=null, tVar; String tokenEsperado="";}
{
    <LEIA>
    try
    {
        (t=<STRING> <VIRG>)*
    } catch(ParseException e) {
        tokenEsperado = "Vírgula e ";
    }

    try
    {
        tVar = <NOMEVAR>
        {
            if(!tabela.isExiste(tVar.image)) {
                erroSemantico("Erro semântico \n A variável "+tVar.image+ " não foi inicializada");
            }
            if (tokenEsperado.length()!=0) {
                token = t; // Volta um token. Volta para String antes da
                // virgula que deveria ter.
                erroSintaticoLocal("Vírgula");
                getNextToken();
            }
        }
    } catch(ParseException e) {
        tokenEsperado += "Variavel";
        erroSintaticoLocal(tokenEsperado);
    }

    (
        <VIRG>
        (
            try
            { 
                tVar = <NOMEVAR>
                {
                    if(!tabela.isExiste(tVar.image))
                    {
                        erroSemantico("Erro semântico \n A variável "+
                                      tVar.image+ " não foi inicializada");
                    }
                }
              |
                <STRING>
            } catch(ParseException e) {
                erroSintaticoLocal("Variavel ou String");
            }
        )
    )*

    try
    {
        <PTVIRG>
    } catch(ParseException e) {
        t = getToken(1);
        // Caso em que há uma string ou variavel e o programador tenha
        // esquecido da virgula antes do token. leia _x,_x "123";
        //                                      aqui ---> ^
        if (t.kind==NOMEVAR || t.kind==STRING)
            erroSintaticoPanico("Vírgula",PTVIRG);
        else
            erroSintaticoLocal("Ponto-e-virgula");
        // Caso em que se esquece do uso do ponto e virgula.
    }
}

void exibe() : {Token t=null;}
{
    <EXIBE>
    (
        try
        { 
            <STRING>
          | <NUMERO>
          | t = <NOMEVAR>
            {
                if(!tabela.isExiste(t.image))
                {
                    erroSemantico("Erro semântico \n A variável "+t.image+
                                  " não foi inicializada");
                }
            }
        } catch(ParseException e) {
            // Aqui é quando há um token diferente ou nenhum token. exibe;
            //                                              Assim --> ^
            erroSintaticoLocal("String, numero ou variável");
        }
    )
    (
        <VIRG>
        (
            try
            { 
                <STRING>
              | <NUMERO>
              | t = <NOMEVAR>
                {
                    if(!tabela.isExiste(t.image))
                    {
                        erroSemantico("Erro semântico \n A variável "+t.image+
                                      " não foi inicializada");
                    }
                }
            } catch(ParseException e) {
                // Econtra uma virgula mas nenhum token obrigatorio após...
                erroSintaticoLocal("String, numero ou variável");
            }
        )
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e)
    {
        t = getToken(1);
        // Caso em que há uma string ou variavel e o programador tenha
        // esquecido da virgula antes do token. exibe _x,_x "123";
        //                                       aqui ---> ^
        if (t.kind==STRING || t.kind==NUMERO || t.kind==NOMEVAR)
            erroSintaticoPanico("Vírgula",PTVIRG);
        else
            erroSintaticoLocal("Ponto-e-virgula");
        // Caso em que se esquece do uso do ponto e virgula.
    }
}

void comandoSe() : {}
{
    blocoSe() (blocoSenaoSe())* (blocoSenao())?
    try
    { 
        <FIMSE>
    } catch(ParseException e) {
        erroSintaticoLocal("Palavra chave \"fimSe\"");
    }
}

void blocoSe() : {}
{
    <SE>
    try
    {
        <PARL>
    } catch(ParseException e) {
        erroSintaticoLocal("Abre parenteses");
    }

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
    }

    listaComandos()
}

void blocoSenaoSe() : {}
{
    <SENAOSE>
    try
    {
        <PARL>
    } catch(ParseException e) {
        erroSintaticoLocal("Abre Parenteses");
    }

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
    }

    listaComandos()
}

void blocoSenao() : {}
{
    <SENAO> listaComandos()
}

void comandoEscolha() : {}
{
    expEscolha() (expCaso())+ (expOutros())?
    try
    {
        <FIMESCOLHA>
    } catch(ParseException e) {
        erroSintaticoLocal("Palavra chave \"fimEscolha\"");
    }
}

void expEscolha() : {}
{
    <ESCOLHA>
    try
    {
        <PARL>
    } catch(ParseException e) {
        erroSintaticoLocal("Abre Parenteses");
    }

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
    }
}

void expCaso() : {}
{
    <CASO>
    try
    {
        <PARL>
    } catch(ParseException e) {
      erroSintaticoLocal("Abre Parenteses");
    }

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
    }

    listaComandos()
}

void expOutros() : {}
{
    <OUTROS> listaComandos()
}

void comandoEnquanto() : {}
{
    <ENQUANTO>
    try
    {
        <PARL>
    } catch(ParseException e) {
        erroSintaticoLocal("Abre Parenteses");
    }

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
    }

    listaComandos()
    try
    {
        <FIMENQUANTO>
    } catch(ParseException e) {
        erroSintaticoLocal("Palavra chave \"fimEquanto\"");
    }
}

void comandoPara() : {Token t=null; }
{
    <PARA>
    try
    {
        <PARL>
    } catch(ParseException e) {
        erroSintaticoLocal("Abre parenteses");
    }

    try
    {
        t = <NOMEVAR>
    } catch(ParseException e) {
        erroSintaticoLocal("Variável");
    }
    {
        if(t!=null && !tabela.isExiste(t.image))
        {
            erroSemantico("Erro semântico \n A variável "+t.image+" não foi inicializada");
        }
    }
    
    (paraSimples() | paraEspecial())

    listaComandos()
    try
    {
        <FIMPARA>
    } catch(ParseException e) {
        erroSintaticoLocal("Palavra chave \"fimPara\"");
    }
}

void paraSimples() : {Token t=null; }
{
    { t = token; }
    
    expressao()
    try
    { 
        <ATE>
    } catch(ParseException e) {
        { String msg = "Palavra-chave \"ate\" ou algum operador";
            if (token.kind==NOMEVAR && t.next.image.equals(token.image)) {
                msg  = "Palavra-chave \"ate\", algum operador ou possivelmen";
                msg += "te uma Vírgula na linha "+token.beginLine+" coluna ";
                msg += token.beginColumn+", antes da variável "+token.image;
                erroSintaticoLocal(msg);
            } else
                erroSintaticoLocal(msg);
        }
    }

    expressao() (<PASSO> expressao())?

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
        {
            getNextToken();
            if (token.kind == ATE) {
                Compilador.expressao();
                getNextToken();
                if (token.kind == PASSO) {
                    Compilador.expressao();
                    getNextToken();
                }
            }
        }
    }
}

void paraEspecial() : { Token t=null;}
{
    (
        <VIRG>
        try
        { 
            t = <NOMEVAR>
        } catch(ParseException e) {
            erroSintaticoLocal("Variável");
        }
        {
            if(t!=null && !tabela.isExiste(t.image))
            {
                erroSemantico("Erro semântico \n A variável "+t.image+" não foi inicializada");
            }
        }
    )+
    
    expressao()
    try
    {
        <ATE>
    } catch(ParseException e) {
        { String msg = "Palavra-chave \"ate\" ou algum operador";
            if (token.kind==NOMEVAR && t.next.image.equals(token.image)) {
                msg  = "Palavra-chave \"ate\", algum operador ou possivelmen";
                msg += "te uma Vírgula na linha "+token.beginLine+" coluna ";
                msg += token.beginColumn+", antes da variável "+token.image;
                erroSintaticoLocal(msg);
            } else
                erroSintaticoLocal(msg);
        }
    }
    
    expressao()

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoLocal("Fecha parenteses");
        {
            getNextToken();
            if (token.kind == PASSO) {
                Compilador.expressao();
                getNextToken();
            }
        }
    }
}
