options  
{
    DEBUG_PARSER = false;
    DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compilador)

import java.io.*;
import minhasclasses.*;

public class Compilador
{
    static Tabela tabela = new Tabela();
    public static void main (String args []) throws ParseException
    { 
        Compilador compilador = null;
        while (true)
        {
            System.out.println("Fazendo analise...");
            try
            {
                compilador = new Compilador(new FileInputStream("exemplo7.hue"));
                compilador.inicio();
                System.out.println("\nEnd of compilation.\n");
                break;
            }
            catch(FileNotFoundException e)
            {
                System.out.println("Erro: arquivo nao encontrado!\n");
                break;
            }
            catch(TokenMgrError e)
            {
                System.out.println("Erro lexico\n" + e.getMessage());
                break;
            }

            catch(ParseException e)
            {
                 System.out.println("Erro sintatico\n" + e.getMessage());
                 break;
            }
        }
    }

    // kindSincronizacao representa o kind do token para a resincronizacao do
    // compilador.
    // Retorna um token anterior ao token de sincronização.
    static public void erroSintaticoPanico(String esperado, int kindSincronizacao)
    {
        Token t = getToken(1);
        System.out.print("\n++ Erro sintatico (linha "+t.beginLine);
        System.out.println(", coluna "+t.beginColumn+") ++");
        System.out.print("Encontrou \'"+t.image+"\'. ");
        System.out.println("Era esperado: "+esperado);
        if (t.kind != kindSincronizacao) {
            // kind 0 representa <EOF>
            while(t.kind!=kindSincronizacao && t.kind != 0) {
                t = getNextToken();
            }
        }
    }

    static public void erroSemantico(String s)
    {
        System.out.println(s);
    }
      
}
PARSER_END(Compilador)

SKIP :
{
        " "
    |   "\r"
    |   "\t"
    |   "\n"
}

/*
    SKIP que ser� usado para os coment�rios
*/

SKIP : { "/*" : comentarioCompleto }

<comentarioCompleto>

SKIP: { "*/" : DEFAULT | <~[]> }

SKIP : { "//" : comentarioLinha }

<comentarioLinha>

SKIP: { "\n" : DEFAULT | <~[]> }

TOKEN :
{
        < NUMERO : (["0" - "9"])*(".")?(["0" - "9"])+ > 
    |   < STRING : ("\"")(~["\""])*("\"") >
    |   < NOMEVAR : ("_")(["a"-"z"]|["A"-"Z"])(["a"-"z"]|["A"-"Z"]|["0"-"9"])* >
    |   < ATRIB : "=" >
    |   < EXIBE : "exibe" >
    |   < LEIA : "leia" >
    |   < TIPONUM : "numero" >
    |   < TIPOSTRING : "string" >
    |   < PARL : "(" >
    |   < PARR : ")" >
    |   < POT : "^" >
    |   < MULT : "*" >
    |   < DIV : "/" >
    |   < ADD : "+" >
    |   < SUB : "-" >
    |   < MAIOR : ">" >
    |   < MENOR : "<" >
    |   < MAIORIGUAL : ">=" >
    |   < MENORIGUAL : "<=" >
    |   < DIFERENTE : "!=" >
    |   < COMPARA : "==" >
    |   < E : "e" >
    |   < OU : "ou" >
    |   < NAO : "nao" >
    |   < OUCC : "OU" >
    |   < SE : "se" >
    |   < SENAOSE : "senaoSe" >
    |   < SENAO : "senao" >
    |   < FIMSE : "fimSe" >
    |   < ESCOLHA : "escolha" >
    |   < CASO : "caso" >
    |   < OUTROS : "outros" >
    |   < FIMESCOLHA : "fimEscolha" >
    |   < ENQUANTO : "enquanto" >
    |   < FIMENQUANTO : "fimEnquanto" >
    |   < PARA : "para" >
    |   < ATE : "ate" >
    |   < PASSO : "passo" >
    |   < FIMPARA : "fimPara" >
    |   < PTVIRG : ";" >
    |   < VIRG : "," >
}

void inicio() : {}
{
    listaComandos() <EOF>
}

void listaComandos() : { }
{
    (comando())*    
}

void comando() : { }
{
        atribVar()
    |   declaraVar()
    |   leia()
    |   exibe()
    |   comandoSe()
    |   comandoEscolha()
    |   comandoEnquanto()
    |   comandoPara()
}

void expressao() : { Expressao expressao=new Expressao(); Item item=null;
Token t=null; expressao.setLinha(getToken(1).beginLine);}
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*

    /*{
        System.out.println("Linha da expressao: "+expressao.getLinha());
        System.out.println("Expressao infixa:\n"+expressao.getCodigoInfixo());
        System.out.println("Expressao posfixa:\n"+expressao);
    }*/
}

void expressaoAuxiliar(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo1(expressao)
    (
        t = <OU>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <OUCC>
      	{
            expressao.addCodigoInfixo(t.image);
        }
        termo1(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo1(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo2(expressao)
    (
        t = <E>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo2(expressao)
        {
            item=new Item(Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )*
}

void termo2(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo3(expressao)
    (
        t = <MAIOR>
        {
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(TipoDados.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENOR>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(TipoDados.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MAIORIGUAL>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(TipoDados.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <MENORIGUAL>
     	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(TipoDados.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <DIFERENTE>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(TipoDados.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <COMPARA>
      	{
            expressao.addCodigoInfixo(t.image);
            expressao.setTipoDados(TipoDados.NUMERO);
        }
        termo3(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo3(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo4(expressao)
    (
        t = <ADD>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
      | t = <SUB>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo4(expressao)
        {
			item= new Item(Item.Tipo.OPERADOR,t.image);
			expressao.addItem(item);
        }
    )*
}

void termo4(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo5(expressao)
    (
        t = <MULT>
        {
            expressao.addCodigoInfixo(t.image);        }
        termo5(expressao)
        {
            item = new Item (Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
      | t = <DIV>
        termo5(expressao)
    )*
}

void termo5(Expressao expressao) : { Token t=null; Item item=null; }
{
    termo6(expressao)
    (
        t = <POT>
        {
            expressao.addCodigoInfixo(t.image);
        }
        termo5(expressao)
        {
            item = new Item (Item.Tipo.OPERADOR,t.image);
            expressao.addItem(item);
        }
    )?
}

void termo6(Expressao expressao) : { Token t=null; int cont=0; }
{
    (
        t = <NAO>
        {
            expressao.addCodigoInfixo(t.image);
            cont++;
        }
    )*
    fator(expressao)
    {
        if(t!=null) {
            if ((cont % 2) == 1)
                expressao.addItem(new Item(Item.Tipo.OPERADOR, t.image));
        }
    }
}

void fator(Expressao expressao) : { Token t=null; Token t1=null;
Item item = null;}
{
    (<ADD> | t1=<SUB>)?
    t = <NUMERO>
    {
        if (t1!=null)
            item = new Item( Item.Tipo.NUMERO,
                             String.valueOf(Integer.parseInt(t.image)*-1) );
        else
            item = new Item( Item.Tipo.NUMERO, t.image );
        expressao.addCodigoInfixo(item.getValor());
        expressao.addItem(item);

        if (expressao.getTipoDados()==null)
            expressao.setTipoDados(TipoDados.NUMERO);
    }
  | t = <STRING>
    {
        expressao.addCodigoInfixo(t.image);
        expressao.addItem(new Item(Item.Tipo.STRING, t.image));
        
        if (expressao.getTipoDados()==null)
            expressao.setTipoDados(TipoDados.STRING);
    }
  | t = <NOMEVAR>
    {
        expressao.addCodigoInfixo(t.image);
        expressao.addItem(new Item(Item.Tipo.VARIAVEL, t.image));
            
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        } else {
            if (expressao.getTipoDados()==null) {
                char tipo = tabela.getTipoSimbolo(t.image);
                
                expressao.setTipoDados(tipo=='n'?
                                       TipoDados.NUMERO :
                                       TipoDados.STRING );
            }
        }
    }
    
  | t = <PARL>
    {
        expressao.addCodigoInfixo(t.image);
    }
    
    expressaoAuxiliar(expressao)

    try
    {
       t = <PARR>
       {
           expressao.addCodigoInfixo(t.image);
       }
    } catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}

void declaraVar() : {Simbolo simb; Token t=null; char tp;}
{
    ( <TIPONUM> {tp='n';} | <TIPOSTRING> {tp='s';} )
    t = <NOMEVAR>
    {
        if(!tabela.isExiste(t.image)) {
            simb = new Simbolo(t.image); 
            simb.setTipo(tp);
            simb.setReferencia(tp); 
            tabela.inclui(simb);
        } else {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " já foi inicializada");
        }
    }
    (
        <VIRG>
        t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) { 
                simb = new Simbolo(t.image); 
                simb.setTipo(tp);
                simb.setReferencia(tp); 
                tabela.inclui(simb);
            } else {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " já foi inicializada");
            }     
        }
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void atribVar() : { Simbolo simbolo; Token t=null; }
{
    t = <NOMEVAR>
    {
        if(!tabela.isExiste(t.image)) {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        }
    }
    (
        <VIRG>
        t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            }
        }
    )*

    <ATRIB>

    expressao()
    (
        <VIRG> expressao()
    )*

    try
    {
        <PTVIRG>
    } catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void leia() : {Token t=null, tVar; }
{
    <LEIA>
    (<STRING> <VIRG>)*

    tVar = <NOMEVAR>
    {
        if(!tabela.isExiste(tVar.image)) {
            erroSemantico("Erro semântico \n A variável "+tVar.image+
                          " não foi inicializada");
        }
    }

    (
        <VIRG>
        (
            tVar = <NOMEVAR>
            {
                if(!tabela.isExiste(tVar.image)) {
                    erroSemantico("Erro semântico \n A variável "+
                                  tVar.image+ " não foi inicializada");
                }
            }
          | <STRING>
        )
    )*

    try
    {
        <PTVIRG>
    } catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void exibe() : {Token t=null;}
{
    <EXIBE>
    (
        <STRING>
      | <NUMERO>
      | t = <NOMEVAR>
        {
            if(!tabela.isExiste(t.image)) {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            }
        }
    )
    (
        <VIRG>
        (
            <STRING>
          | <NUMERO>
          | t = <NOMEVAR>
            {
                if(!tabela.isExiste(t.image))
                {
                    erroSemantico("Erro semântico \n A variável "+t.image+
                                  " não foi inicializada");
                }
            }
        )
    )*

    try
    {
        <PTVIRG>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Ponto-e-virgula",PTVIRG);
    }
}

void comandoSe() : {}
{
    blocoSe() (blocoSenaoSe())* (blocoSenao())? <FIMSE>
}

void blocoSe() : {}
{
    <SE> <PARL>

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    listaComandos()
}

void blocoSenaoSe() : {}
{
    <SENAOSE> <PARL>

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    listaComandos()
}

void blocoSenao() : {}
{
    <SENAO> listaComandos()
}

void comandoEscolha() : {}
{
    expEscolha() (expCaso())+ (expOutros())? <FIMESCOLHA>
}

void expEscolha() : {}
{
    <ESCOLHA> <PARL>

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}

void expCaso() : {}
{
    <CASO> <PARL>

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    listaComandos()
}

void expOutros() : {}
{
    <OUTROS> listaComandos()
}

void comandoEnquanto() : {}
{
    <ENQUANTO> <PARL>

    expressao()

    try
    {
       <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }

    listaComandos() <FIMENQUANTO>
}

void comandoPara() : {Token t=null; }
{
    <PARA> <PARL>

    t = <NOMEVAR>
    {
        if(t!=null && !tabela.isExiste(t.image))
        {
            erroSemantico("Erro semântico \n A variável "+t.image+
                          " não foi inicializada");
        }
    }
    
    (paraSimples() | paraEspecial())

    listaComandos() <FIMPARA>
}

void paraSimples() : { }
{
    expressao() <ATE> expressao()

    (<PASSO> expressao())?

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}

void paraEspecial() : { Token t=null;}
{
    (
        <VIRG> t = <NOMEVAR>
        {
            if(t!=null && !tabela.isExiste(t.image))
            {
                erroSemantico("Erro semântico \n A variável "+t.image+
                              " não foi inicializada");
            }
        }
    )+
    
    expressao() <ATE> expressao()

    try
    {
        <PARR>
    }
    catch(ParseException e) {
        erroSintaticoPanico("Fecha parenteses",PTVIRG);
    }
}
